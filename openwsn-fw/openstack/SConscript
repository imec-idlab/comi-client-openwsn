import os

Import('env')

localEnv = env.Clone()

target = 'libopenstack'
sources_c = [
    'openstack.c',
    #=== 02a-MAClow
    os.path.join('02a-MAClow','topology.c'),
    os.path.join('02a-MAClow','IEEE802154.c'),
    os.path.join('02a-MAClow','IEEE802154E.c'),
    os.path.join('02a-MAClow','adaptive_sync.c'),
    os.path.join('02a-MAClow','IEEE802154_security.c'),
    os.path.join('02a-MAClow','IEEE802154_dummy_security.c'),
    #=== 02b-MAChigh
    os.path.join('02b-MAChigh','neighbors.c'),
    os.path.join('02b-MAChigh','sf0.c'),
    os.path.join('02b-MAChigh','processIE.c'),
    os.path.join('02b-MAChigh','schedule.c'),
    os.path.join('02b-MAChigh','sixtop.c'),
    #=== 03a-IPHC
    os.path.join('03a-IPHC','iphc.c'),
    os.path.join('03a-IPHC','openbridge.c'),
    #=== 03b-IPv6
    os.path.join('03b-IPv6','forwarding.c'),
    os.path.join('03b-IPv6','icmpv6.c'),
    os.path.join('03b-IPv6','icmpv6echo.c'),
    os.path.join('03b-IPv6','icmpv6rpl.c'),
    #=== 04-TRAN
    os.path.join('04-TRAN','opencoap.c'),
    os.path.join('04-TRAN','opentcp.c'),
    os.path.join('04-TRAN','openudp.c'),
    #=== Libcoap
    os.path.join('04-TRAN','libcoap','address.c'),
    os.path.join('04-TRAN','libcoap','async.c'),
    os.path.join('04-TRAN','libcoap','block.c'),
    os.path.join('04-TRAN','libcoap','coap_io.c'),
    os.path.join('04-TRAN','libcoap','coap_time.c'),
    os.path.join('04-TRAN','libcoap','debug.c'),
    os.path.join('04-TRAN','libcoap','encode.c'),
    os.path.join('04-TRAN','libcoap','hashkey.c'),
    os.path.join('04-TRAN','libcoap','mem.c'),
    os.path.join('04-TRAN','libcoap','net.c'),
    os.path.join('04-TRAN','libcoap','option.c'),
    os.path.join('04-TRAN','libcoap','pdu.c'),
    os.path.join('04-TRAN','libcoap','resource.c'),
    os.path.join('04-TRAN','libcoap','str.c'),
    os.path.join('04-TRAN','libcoap','subscribe.c'),
    os.path.join('04-TRAN','libcoap','uri.c'),   

    #=== cross-layers
    os.path.join('cross-layers','idmanager.c'),
    os.path.join('cross-layers','openqueue.c'),
    os.path.join('cross-layers','openrandom.c'),
    os.path.join('cross-layers','packetfunctions.c'),
]
sources_h = [
    'openstack.h',
    #=== 02a-MAClow
    os.path.join('02a-MAClow','topology.h'),
    os.path.join('02a-MAClow','IEEE802154.h'),
    os.path.join('02a-MAClow','IEEE802154E.h'),
    os.path.join('02a-MAClow','adaptive_sync.h'),
    os.path.join('02a-MAClow','ieee802154_security_driver.h'),
    os.path.join('02a-MAClow','IEEE802154_security.h'),
    os.path.join('02a-MAClow','IEEE802154_dummy_security.h'),
    #=== 02b-MAChigh
    os.path.join('02b-MAChigh','neighbors.h'),
    os.path.join('02b-MAChigh','sf0.h'),
    os.path.join('02b-MAChigh','processIE.h'),
    os.path.join('02b-MAChigh','schedule.h'),
    os.path.join('02b-MAChigh','sixtop.h'),
    #=== 03a-IPHC
    os.path.join('03a-IPHC','iphc.h'),
    os.path.join('03a-IPHC','openbridge.h'),
    #=== 03b-IPv6
    os.path.join('03b-IPv6','forwarding.h'),
    os.path.join('03b-IPv6','icmpv6.h'),
    os.path.join('03b-IPv6','icmpv6echo.h'),
    os.path.join('03b-IPv6','icmpv6rpl.h'),
    #=== 04-TRAN
    os.path.join('04-TRAN','opencoap.h'),
    os.path.join('04-TRAN','opentcp.h'),
    os.path.join('04-TRAN','openudp.h'),
    #=== Libcoap
    os.path.join('04-TRAN','libcoap','address.h'),
    os.path.join('04-TRAN','libcoap','async.h'),
    os.path.join('04-TRAN','libcoap','bits.h'),
    os.path.join('04-TRAN','libcoap','block.h'),
    os.path.join('04-TRAN','libcoap','coap.h'),
    os.path.join('04-TRAN','libcoap','coap_config.h'),
    os.path.join('04-TRAN','libcoap','coap_io.h'),
    os.path.join('04-TRAN','libcoap','coap_time.h'),
    os.path.join('04-TRAN','libcoap','debug.h'),
    os.path.join('04-TRAN','libcoap','encode.h'),
    os.path.join('04-TRAN','libcoap','hashkey.h'),
    os.path.join('04-TRAN','libcoap','libcoap.h'),
    os.path.join('04-TRAN','libcoap','lwippools.h'),
    os.path.join('04-TRAN','libcoap','mem.h'),
    os.path.join('04-TRAN','libcoap','net.h'),
    os.path.join('04-TRAN','libcoap','option.h'),
    os.path.join('04-TRAN','libcoap','pdu.h'),
    os.path.join('04-TRAN','libcoap','prng.h'),
    os.path.join('04-TRAN','libcoap','resource.h'),
    os.path.join('04-TRAN','libcoap','str.h'),
    os.path.join('04-TRAN','libcoap','subscribe.h'),
    os.path.join('04-TRAN','libcoap','uri.h'),   
    os.path.join('04-TRAN','libcoap','uthash.h'),   
    os.path.join('04-TRAN','libcoap','utlist.h'),   

    #=== cross-layers
    os.path.join('cross-layers','idmanager.h'),
    os.path.join('cross-layers','openqueue.h'),
    os.path.join('cross-layers','openrandom.h'),
    os.path.join('cross-layers','packetfunctions.h'),
    #=== apps
    os.path.join('#','openapps','userialbridge','userialbridge.h'),
]

if localEnv['board']=='python':
    
    for s in sources_c+sources_h:
        temp = localEnv.Objectify(
            target = localEnv.ObjectifiedFilename(s),
            source = s,
        )
        #localEnv.AlwaysBuild(temp)
    
    libopenstack = localEnv.Library(
        target = target,
        source = [localEnv.ObjectifiedFilename(s) for s in sources_c],
    )
    localEnv.Depends(libopenstack,[localEnv.ObjectifiedFilename(s) for s in sources_h])
    
else:
    
    localEnv.Append(
        CPPPATH =  [
            # inc
            os.path.join('#','inc'),
            # kernel
            os.path.join('#','kernel'),
            # drivers
            os.path.join('#','drivers','common'),
            # openstack
            os.path.join('#','openstack'),
            os.path.join('#','openstack','02a-MAClow'),
            os.path.join('#','openstack','02b-MAChigh'),
            os.path.join('#','openstack','03a-IPHC'),
            os.path.join('#','openstack','03b-IPv6'),
            os.path.join('#','openstack','04-TRAN'),
            os.path.join('#','openstack','04-TRAN','libcoap'),
            os.path.join('#','openstack','cross-layers'),
            # openapps
            # TODO: remove once cleaned-up?
            os.path.join('#','openapps','c6t'),
            os.path.join('#','openapps','cexample'),
            os.path.join('#','openapps','comi'),
            os.path.join('#','openapps','cinfo'),
            os.path.join('#','openapps','cleds'),
            os.path.join('#','openapps','cstorm'),
            os.path.join('#','openapps','cwellknown'),
            os.path.join('#','openapps','rrt'),
            os.path.join('#','openapps','techo'),
            os.path.join('#','openapps','tohlone'),
            os.path.join('#','openapps','uecho'),
            os.path.join('#','openapps','uinject'),
            os.path.join('#','openapps','userialbridge'),
        ],
    )
    
    libopenstack = localEnv.Library(
        target = target,
        source = sources_c,
    )

Alias('libopenstack', libopenstack)
